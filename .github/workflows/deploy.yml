name: Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - dev
      - qa1
      - main1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest --maxfail=1 --disable-warnings -q
          
      # Single AWS credentials configuration step with conditions
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ github.ref_name == 'dev' && secrets.AWS_ROLE_TO_ASSUME_DEV || github.ref_name == 'qa1' && secrets.AWS_ROLE_TO_ASSUME_QA || github.ref_name == 'main' && secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: us-east-1

      - name: Set variables
        run: |
          BRANCH=${GITHUB_REF##*/}
          ENV=${BRANCH/main/prod}
          STACK_NAME="MetadataOnboarding-${ENV}"
          echo "ENV=${ENV}" >> $GITHUB_ENV
          echo "STACK_NAME=${STACK_NAME}" >> $GITHUB_ENV

      - name: Create environment-specific config
        run: |
          ENV=${ENV}
          PARAMS_FILE="infra/parameters/${ENV}-parameters.json"
          mkdir -p configs
          # Extract RBAC parameters from parameter file
          SECRET_NAME=$(jq -r '.Parameters.SecretsManagerSecretName' $PARAMS_FILE)
          S3_BUCKET=$(jq -r '.Parameters.S3BucketName' $PARAMS_FILE)
          S3_PREFIX=$(jq -r '.Parameters.S3RootPrefix' $PARAMS_FILE)
          DB_HOST=$(jq -r '.Parameters.DBHost' $PARAMS_FILE || echo "postgresql-data-onboarding.c1qsgmiggfyu.us-east-1.rds.amazonaws.com")
          DB_NAME=$(jq -r '.Parameters.DBName' $PARAMS_FILE || echo "postgres")
          DB_PORT=$(jq -r '.Parameters.DBPort' $PARAMS_FILE || echo "5432")
          DB_SECRET=$(jq -r '.Parameters.DBSecret' $PARAMS_FILE || echo "${SECRET_NAME}")
          
          cat > configs/config-${ENV}.json << EOF
          {
            "database": {
              "secret_name": "${DB_SECRET}",
              "region": "us-east-1",
              "host": "${DB_HOST}",
              "dbname": "${DB_NAME}",
              "port": ${DB_PORT}
            },
            "secrets_manager_secret_name": "${SECRET_NAME}",
            "s3_bucket": "${S3_BUCKET}",
            "s3_root_prefix": "${S3_PREFIX}"
          }
          EOF
          
      - name: Run DB migrations
        run: |
          # ENV variable is now set from the previous step
          # Ensure config file exists
          if [ -f "configs/config-${ENV}.json" ]; then
            echo "Found config file: configs/config-${ENV}.json"
            cat configs/config-${ENV}.json
          else 
            echo "Config file not found at configs/config-${ENV}.json"
            ls -la configs/
          fi
          
          # Debug - print current directory and look for migrations
          echo "Current directory: $(pwd)"
          echo "Looking for migrations directory:"
          ls -la          if [ -d "migrations" ]; then
            echo "Migrations directory found in current directory"
          else
            echo "Migrations directory not found in current directory"
          fi
          
          # Run with proper working directory to ensure migrations can be found
          python scripts/pre_deploy.py --env ${ENV}
          
      - name: Clean up existing EB env
        run: |
          APP=$(jq -r '.Parameters.ApplicationName' infra/parameters/${ENV}-parameters.json)
          ENV_NAME=$(jq -r '.Parameters.EnvironmentName' infra/parameters/${ENV}-parameters.json)
          echo "Checking if environment $ENV_NAME exists..."
          
          # Check if the environment exists before attempting to terminate
          ENV_EXISTS=$(aws elasticbeanstalk describe-environments \
                        --application-name $APP \
                        --environment-names $ENV_NAME \
                        --no-include-deleted \
                        | jq '.Environments | length')
                        
          if [ "$ENV_EXISTS" -gt "0" ]; then
            echo "Environment $ENV_NAME exists, terminating..."
            aws elasticbeanstalk terminate-environment --environment-name $ENV_NAME
            
            # Wait for termination to complete
            echo "Waiting for environment termination..."
            while true; do
              STATUS=$(aws elasticbeanstalk describe-environments \
                        --application-name $APP \
                        --environment-names $ENV_NAME \
                        --no-include-deleted \
                        | jq -r '.Environments[0].Status // empty')
                if [ -z "$STATUS" ] || [ "$STATUS" = "Terminated" ]; then
                echo "Environment termination completed."
                break
              fi
              
              echo "Environment status: $STATUS. Waiting 15 seconds..."
              sleep 15
            done
          else
            echo "Environment $ENV_NAME does not exist, skipping termination."
          fi
          
      - name: Create S3 buckets
        run: |
          APP=$(jq -r '.Parameters.ApplicationName' infra/parameters/${ENV}-parameters.json)
          echo "Application name from parameters: $APP"
          
          # Fix the base name extraction by using a more reliable method
          if [[ "$APP" == *-dev ]]; then
            BASE=${APP%-dev}
          elif [[ "$APP" == *-qa ]]; then
            BASE=${APP%-qa}
          elif [[ "$APP" == *-prod ]]; then
            BASE=${APP%-prod}
          else
            BASE="metadataonboarding"  # Fallback default name
          fi
          
          echo "Using base name: $BASE"
          echo "BASE_NAME=$BASE" >> $GITHUB_ENV
          
          # Ensure bucket names are in lowercase          S3_BUCKET="${BASE,,}-eb-artifacts-${ENV,,}"
          echo "Creating S3 bucket: $S3_BUCKET"
          aws s3 mb "s3://$S3_BUCKET" || true
          echo "S3_ARTIFACTS_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          
          CFN_BUCKET="${BASE,,}-cfn-artifacts-${ENV,,}"
          echo "Creating S3 bucket: $CFN_BUCKET"
          aws s3 mb "s3://$CFN_BUCKET" || true
          echo "S3_CFN_BUCKET=$CFN_BUCKET" >> $GITHUB_ENV
          
      - name: Archive and Upload Application
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          CH=$(git rev-parse --short HEAD)
          LABEL="v${TS}-${CH}"
          KEY="app-${LABEL}.zip"
          
          # Create zip archive excluding unnecessary files
          echo "Creating application archive: $KEY"
          zip -r $KEY . -x ".git*" -x ".github/*" -x "infra/*" -x "tests/*" -x "Sample_Files/*"
            # Use the environment variable set in the previous step
          echo "Uploading to S3 bucket: $S3_ARTIFACTS_BUCKET"
          aws s3 cp $KEY "s3://$S3_ARTIFACTS_BUCKET/$KEY"
          
          # Set environment variables for later steps
          echo "VERSION_LABEL=$LABEL" >> $GITHUB_ENV
          echo "S3_KEY=$KEY" >> $GITHUB_ENV
          
      - name: Create EB Application & Version
        run: |
          APP=$(jq -r '.Parameters.ApplicationName' infra/parameters/${ENV}-parameters.json)
          echo "Creating Elastic Beanstalk application: $APP"
          aws elasticbeanstalk create-application --application-name $APP || true
          
          echo "Creating application version: $VERSION_LABEL"
          echo "Using S3 bucket: $S3_ARTIFACTS_BUCKET"
          
          aws elasticbeanstalk create-application-version \
            --application-name $APP \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=$S3_ARTIFACTS_BUCKET,S3Key=${S3_KEY} \
            --process

      - name: Set CloudFormation parameters
        run: |
          P="infra/parameters/${ENV}-parameters.json"
          APP=$(jq -r '.Parameters.ApplicationName' $P)
          ENV_NAME=$(jq -r '.Parameters.EnvironmentName' $P)
          INSTANCE=$(jq -r '.Parameters.InstanceType' $P)
          KEYN=$(jq -r '.Parameters.KeyName' $P)
          STACK_NAME=${STACK_NAME}
          SECRET=$(jq -r '.Parameters.SecretsManagerSecretName' $P)
          SB=$(jq -r '.Parameters.S3BucketName' $P)
          SR=$(jq -r '.Parameters.S3RootPrefix' $P)
          aws cloudformation deploy \
            --template-file infra/cloudformation.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              ApplicationName=$APP \
              EnvironmentName=$ENV_NAME \
              InstanceType=$INSTANCE \
              KeyName=$KEYN \
              DeployEnvironment=$ENV \
              SolutionStackName="$(jq -r '.Parameters.SolutionStackName' $P)" \
              SourceBundleKey=$S3_KEY \
              VersionLabel=$VERSION_LABEL \
              SecretsManagerSecretName=$SECRET \
              S3BucketName=$SB \
              S3RootPrefix=$SR \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset
