name: Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - dev
      - qa
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials for Dev
        if: ${{ github.ref == 'refs/heads/dev' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: us-east-1

      - name: Configure AWS credentials for QA
        if: ${{ github.ref == 'refs/heads/qa' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_QA }}
          aws-region: us-east-1

      - name: Configure AWS credentials for Prod
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: us-east-1

      - name: Set variables
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [[ "$BRANCH" == "main" ]]; then ENV=prod; else ENV=$BRANCH; fi
          STACK_NAME="DataOnboarding-${ENV}"
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infra/cloudformation.yaml \
            --stack-name ${STACK_NAME} \
            --parameter-overrides file://infra/parameters/${ENV}-parameters.json \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Describe CFN events on failure
        if: failure()
        run: |
          if aws cloudformation describe-stacks --stack-name ${STACK_NAME} >/dev/null 2>&1; then
            aws cloudformation describe-stack-events --stack-name ${STACK_NAME} --output table
          else
            echo "Stack ${STACK_NAME} does not exist; skipping describe-stack-events."
          fi

      - name: Describe CFN events on failure
        if: failure()
        run: |
          if aws cloudformation describe-stacks --stack-name ${STACK_NAME} >/dev/null 2>&1; then
            aws cloudformation describe-stack-events --stack-name ${STACK_NAME} --output table
          else
            echo "Stack ${STACK_NAME} does not exist; skipping describe-stack-events."
          fi

      - name: Check CloudFormation stack status
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [[ "$BRANCH" == "main" ]]; then
            ENV=prod
          else
            ENV=$BRANCH
          fi
          STACK_NAME="DataOnboarding-${ENV}"
          STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query 'Stacks[0].StackStatus' --output text)
          echo "CloudFormation stack status: $STATUS"
          if [[ "$STATUS" != "CREATE_COMPLETE" && "$STATUS" != "UPDATE_COMPLETE" ]]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi

      - name: Get EB artifacts S3 bucket name
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [[ "$BRANCH" == "main" ]]; then
            ENV=prod
          else
            ENV=$BRANCH
          fi
          STACK_NAME="DataOnboarding-${ENV}"
          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
            --output text)
          echo "EB_S3_BUCKET=${S3_BUCKET}" >> $GITHUB_ENV

      - name: Archive application
        run: zip -r app.zip . -x "**/.git*" "**/.github/*"

      - name: Upload artifact to S3
        run: |
          S3_KEY="app_${GITHUB_SHA}.zip"
          aws s3 cp app.zip s3://${EB_S3_BUCKET}/${S3_KEY}
          echo "S3_KEY=${S3_KEY}" >> $GITHUB_ENV

      - name: Create application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name DataOnboardingApp \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=${{ env.EB_S3_BUCKET }},S3Key=${{ env.S3_KEY }}

      - name: Set EB environment name
        run: |
          if [[ "${GITHUB_REF##*/}" == 'dev' ]]; then
            echo "EB_ENV_NAME=${{ secrets.EB_ENV_DEV }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == 'qa' ]]; then
            echo "EB_ENV_NAME=${{ secrets.EB_ENV_QA }}" >> $GITHUB_ENV
          else
            echo "EB_ENV_NAME=${{ secrets.EB_ENV_PROD }}" >> $GITHUB_ENV
          fi

      - name: Update environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ env.EB_ENV_NAME }} \
            --version-label ${{ github.sha }}